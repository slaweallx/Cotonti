/**
 * @package Cotonti
 * @copyright (c) Cotonti Team
 * @license https://github.com/Cotonti/Cotonti/blob/master/License.txt
 */
let CotontiPeriodicalRequest=null;!function(){CotontiPeriodicalRequest=class{#e;#t=null;#a=!1;constructor(){this.#e=new Map}add(t,a,o,n){this.#e.set(t,new e(a,o,n)),this.#o()}remove(e){this.#e.delete(e),this.#o()}#o(){let e=0;this.#e.forEach(((t,a,o)=>{(0===e||e>t.timeout)&&(e=t.timeout)})),null!==this.#t&&(window.clearTimeout(this.#t),this.#t=null),this.#t=window.setTimeout((()=>{this.#n()}),1e3*e)}#r(){}#n(){if(this.#a)return;this.#a=!0,console.log("Execute request start");const e=Date.now();let t=null;do{t=Date.now()}while(t-e<2e3);console.log("Execute request end")}};class e{params;callback;timeout;constructor(e,t,a){this.params=e,this.callback=t,this.timeout=a}}}();class CotontiApplication{#i=null;async loadData(e){if(!e)return{};void 0===this.loadedData&&(this.loadedData={});let t=[];("string"==typeof e||e instanceof String)&&(e=[e]);for(let a of e)a in this.loadedData||t.push(a);if(t.length>0){let e=new URLSearchParams({a:"get"});t.forEach(((t,a,o)=>{e.append("data["+a+"]",t)})),e.append("_ajax",1);try{let t=await fetch("index.php?"+e.toString());if(t.ok){const e=await t.json();if(e.success)for(const t in e.data)this.loadedData[t]=e.data[t]}}catch(e){}}let a={};for(let t of e)t in this.loadedData&&(a[t]=this.loadedData[t]);return a}loadCaptcha(){this.loadData(["captcha","x"]).then((e=>{let t=document.querySelectorAll(".captcha-place-holder");for(let a of t){a.innerHTML=e.captcha,this.executeScriptElements(a),a.classList.remove("captcha-place-holder","loading"),a.classList.add("captcha");const t=a.closest("form");if(null!==t){let a=t.querySelector('input[type="hidden"][name="x"]');null!==a&&a.setAttribute("value",e.x)}}}))}getPeriodicalRequest(){return null===this.#i&&(this.#i=new CotontiPeriodicalRequest),this.#i}executeScriptElements(e){const t=e.querySelectorAll("script");Array.from(t).forEach((e=>{const t=document.createElement("script");Array.from(e.attributes).forEach((e=>{t.setAttribute(e.name,e.value)})),t.text=e.text,e.parentNode.replaceChild(t,e)}))}}let cot=new CotontiApplication;function encodeURIfix(e){return encodeURI(decodeURI(e)).replace(/%5B/g,"[").replace(/%5D/g,"]")}function getBaseHref(){var e=document.getElementsByTagName("base")[0].href;return null==e?"/":e}function popup(e,t,a){window.open(getBaseHref()+"index.php?o="+e,"","toolbar=0,location=0,directories=0,menuBar=0,resizable=0,scrollbars=yes,width="+t+",height="+a+",left=32,top=16")}function pfs(e,t,a,o){window.open(getBaseHref()+"index.php?e=pfs&userid="+e+"&c1="+t+"&c2="+a+"&parser="+o,"PFS","status=1, toolbar=0,location=0,directories=0,menuBar=0,resizable=1,scrollbars=yes,width=754,height=512,left=32,top=16")}function redirect(e){location.href=e.options[e.selectedIndex].value}function toggleblock(e){var t=document.getElementById(e);return"none"==t.style.display?t.style.display="":t.style.display="none",!1}function toggleAll(e){var t=document.querySelectorAll('[id^="blk_"]');for(i=0;i<t.length;i++)"hide"==e?t[i].style.display="none":"show"==e&&(t[i].style.display="table-row-group");return!1}function insertText(e,t,a){var o=null;e||(e=document);e:for(var n=0;n<e.forms.length;n++)for(var r=0;r<e.forms[n].elements.length;r++)if(e.forms[n].elements[r].name==t){o=e.forms[n].elements[r];break e}if(!o)return!1;if(e.selection)o.focus(),e.selection.createRange().text=a;else if(o.selectionStart||0==o.selectionStart){var i=o.selectionStart,s=o.selectionEnd;o.value=o.value.substring(0,i)+a+o.value.substring(s,o.value.length)}else o.value+=a;return!0}var ajaxErrorHandlers=new Array,ajaxSuccessHandlers=new Array,ajaxEnabled=!1;if("undefined"!=typeof jQuery)var ajaxCurrentBase=location.href.replace($("base").eq(0).attr("href"),"").replace(/\?.*$/,"").replace(/#.*$/,"");var ajaxUsed=!1,ajaxError=!1;function ajaxSend(e){var t=e.method?e.method.toUpperCase():"GET",a=e.data||"",o=e.url||$("#"+e.formId).attr("action");if("POST"===t)a+="&"+$("#"+e.formId).serialize();else if(e.formId){var n=o.indexOf("?")>0?"&":"?";o+=n+$("#"+e.formId).serialize()}return $.ajax({type:t,url:encodeURIfix(o),data:a,beforeSend:function(){e.nonshowloading||$("#"+e.divId).append('<span style="position:absolute; left:'+($("#"+e.divId).width()/2-110)+"px;top:"+($("#"+e.divId).height()/2-9)+'px;" class="loading" id="loading"><img src="./images/spinner.gif" alt="loading"/></span>').css("position","relative")},success:function(t){e.nonshowloading||$("#loading").remove(),e.nonshowfadein?$("#"+e.divId).html(t):$("#"+e.divId).hide().html(t).fadeIn(500);for(var a=0;a<ajaxSuccessHandlers.length;a++)ajaxSuccessHandlers[a].func?ajaxSuccessHandlers[a].func(t):ajaxSuccessHandlers[a](t)},error:function(t){if(e.nonshowloading||$("#loading").remove(),e.nonshowfadein?$("#"+e.divId).html(t):$("#"+e.divId).hide().html(t).fadeIn(500),ajaxErrorHandlers.length>0)for(var a=0;a<ajaxErrorHandlers.length;a++)ajaxErrorHandlers[a].func?ajaxErrorHandlers[a].func(t):ajaxErrorHandlers[a](t);else alert("AJAX error: "+t),ajaxError=!0}}),!1}function ajaxPageLoad(e){""!==e&&e.replace(/^#/,"");var t=e.match(/^get(-.*?)?;(.*)$/);if(t){var a=t[2].indexOf(";")>0?t[2].replace(";","?"):ajaxCurrentBase+"?"+decodeURIComponent(t[2]);return ajaxUsed=!0,ajaxSend({method:"GET",url:a,divId:t[1]?t[1].substr(1):"ajaxBlock"})}return""!==e||!ajaxUsed||ajaxSend({url:location.href.replace(/#.*$/,""),divId:"ajaxBlock"})}function ajaxFormLoad(e,t){var a=e.match(/^(get|post)(-.*?)?;(.*)$/);if(a){var o=a[3].indexOf(";")>0?a[3].replace(";","?"):ajaxCurrentBase+"?"+a[3];return ajaxUsed=!0,ajaxSend({method:a[1].toUpperCase(),url:o,divId:a[2]?a[2].substr(1):"ajaxBlock",formId:t})}return!0}function ajaxMakeHash(e,t,a){var o,n,r="post"==a?"post":"get",i="?",s=!!t&&t.match(/(get|post)(-[^ ;]+)?(;\S*)?/);return s&&(r=s[1],s[2]&&(r+=s[2]),s[3]&&(e=s[3].substr(1),i=";")),r+=";",e.indexOf(i)>0?(o=e.substr(0,e.indexOf(i)),n=e.substr(e.indexOf(i)+1),a&&"post"!=a&&(n+="&"+a)):(o=e,n="",a&&"post"!=a&&(n+=i+a)),r+=o==ajaxCurrentBase?n:o+";"+n}function bindHandlers(){("#comments"==location.hash||location.hash.match(/#c\d+/))&&$(".comments").css("display",""),$(".comments_link").click((function(){"none"==$(".comments").css("display")?$(".comments").css("display",""):$(".comments").css("display","none")})),location.href.match(/#comments/)&&$(".comments").css("display",""),ajaxEnabled&&($("body").on("submit","form.ajax",(function(){return"POST"==$(this).attr("method").toUpperCase()?ajaxFormLoad(ajaxMakeHash($(this).attr("action").replace(/#.*$/,""),$(this).attr("class"),"post"),$(this).attr("id")):window.location.hash=ajaxMakeHash($(this).attr("action").replace(/#.*$/,""),$(this).attr("class"),$(this).serialize()),ajaxError})),$("body").on("click","a.ajax",(function(){return window.location.hash=ajaxMakeHash($(this).attr("href").replace(/#.*$/,""),$(this).attr("rel")),ajaxError})),$("body").on("click","a.confirmLink",(function(){return!$(this).attr("href").match(/message.+920/i)||($("#confirmBox")&&$("#confirmBox").remove(),$("body").prepend('<div id="confirmBox" class="jqmWindow"></div>'),$("#confirmBox").jqm({ajax:$(this).attr("href"),modal:!0,onLoad:function(){$("#confirmBox").css("margin-left","-"+$("#confirmBox").width()/2+"px"),$("#confirmBox").css("margin-top","-"+$("#confirmBox").height()/2+"px")}}),$("#confirmBox").jqmShow(),!1)})),$(window).on("hashchange",(function(){ajaxPageLoad(window.location.hash.replace(/^#/,""))})),$("body").on("click","a#confirmNo",(function(){return!$("#confirmBox").is(".jqmWindow")||($("#confirmBox").jqmHide(),$("#confirmBox").remove(),!1)})))}"undefined"!=typeof jQuery&&$(document).ready((function(){ajaxEnabled&&""!=window.location.hash&&ajaxPageLoad(window.location.hash.replace(/^#/,"")),bindHandlers()})),window.name="main";
//# sourceMappingURL=data:application/json;charset=utf8;base64,
